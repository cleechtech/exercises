Node notes:

Globals

console object outputs to stdout or stderr

	console.log() writes to stdout and appends a \n

	console.log({ foo: 'bar' });
	// => [object Object]

	console.error() writes to stderr

	console.dir() pretty-prints objects to stdout

	console.dir({ foo: 'bar' });
	// => { foo: 'bar' }

	console.assert() asserts that the given expression is truthy or throws an exception

	console.assert(connected, 'Database connection failed');

process object has information about the node process itself

	process.version gives the node version string
	
	process.platform gives the platform you're running on
	
	process.pid gives the process id
	
	process.cwd() gives current working directory
	
	process.chdir() changes working directory to the path passed
	
	process.env gives object containing the user's environment variables
	
	process.argv provides access to the argument list. First value is always node. returns array
	
	process.exit()
	process.on()
	process.kill()
	
	
Emitting Events

	var EventEmitter = require('events').EventEmitter;
	
	var emitter = new EventEmitter;
	
	// emitter.on() method, which accepts the name of the event and arbitrary objects passed as data
	emitter.on('name', function(first, last){
		console.log(first + ', ' + last);
	});
	
	// pass event name ('name' in this case) and arguments
	emitter.emit('name', 'tj', 'holowaychuk');
	emitter.emit('name', 'simon', 'holowaychuk');

Inherit from EventEmitter

	var EventEmitter = require('events').EventEmitter;
	
	function Dog(name) {
		this.name = name;
	}
	
	Dog.prototype.__proto__ = EventEmitter.prototype; // Dog inherits from EventEmitter
	
	var simon = new Dog('simon'); // make a Dog
	
	simon.on('bark', function(){
		console.log(this.name + ' barked'); // when he barks print to stdout
	});
	
	// bark twice per second
	setInterval(function(){
		simon.emit('bark');
	}, 500);
	
Buffers

	global buffer object can handle binary data. Buffer instances represent memory allocated
	independently of V8's heap.

Streams

	stream API is a unified way to handle stream-like data. 
	For example, data can be streamed to a file, streamed to a socket to respond to an HTTP 
	request, or streamed from a read-only source such as stdin.
	
	Readable Streams
		inherit from EventEmitter in order to expose incoming data through events.
		'data' event is an arbitrary chunk passed to the event handler as a Buffer instance
		
		req.on('data', function(buf){
			// do something with buffer
			buf.toString(); //like convert it to a string
		});
		
		OR
		
		req.setEncoding('utf-8');
		req.on('data', function(str){
			// do something with string
		});
		
		The 'end' event represents the end of 'data' events.
		
		
		var http = require('http');
		
		http.createServer(function(req, res){
			res.writeHead(200);
			req.on('data', function(data){
				res.write(data);
			});
			req.on('end', function(){
				res.end();
			});
		}).listen(8000);
		
		.. same as ...
		
		var http = require('http'),
			sys = require('sys');
		
		http.createServer(function(req, res){
			res.writeHead(200);
			sys.pump(req, res);
			
		}).listen(8000);

File System
	This example creates a directory, creates a file inside it, then 
	writes the contents of the file to console (async approach):

	var fs = require('fs');
	
	fs.mkdir('./helloDir',0777, function (err) {
		if (err) throw err;
		
		fs.writeFile('./helloDir/message.txt', 'Hello Node', function (err) {
			if (err) throw err;
			
			console.log('file created with contents:');

			fs.readFile('./helloDir/message.txt','UTF-8' ,function (err, data) {
				if (err) throw err;
				
				console.log(data);
			});
		});
	});

	Watching Files - monitor a file and fire an event whenever the file is changed
		
		var fs = require('fs');
		
		fs.watchFile('./toWatch.txt', function(curr, prev){
			console.log('the current mtime is: ' + curr.mtime);
			console.log('the previous mtime was: ' + prev.mtime);
		});
		
		fs.writeFile('./toWatch', "changed", function(err){
			if (err) throw err;
			
			console.log("file write complete");
		});
		
		files can also be unwatched using fs.unwatchFile
		
		

		
	




















	
	
